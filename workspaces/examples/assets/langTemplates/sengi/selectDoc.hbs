/**
 * Select a {{identToPascalCase variantBaseName}} document or return null if it was not found.
 * @param documentId The id of a document.
 * @param fieldNames An array of field names.
 * @param authUser An authenticated user.
 * @param pathComponents An array of components to be added to the path for this request.
 */
async select{{identToPascalCase variantBaseName}}Doc ({ documentId, fieldNames, user, pathComponents }: { documentId: string; fieldNames: {{identToPascalCase variantBaseName}}FieldNames[]; user: Types.AuthUser, pathComponents?: string[] }): Promise<Types.{{identToPascalCase system}}{{identToPascalCase name}}|null> {
  if (!documentId) {
    return null
  }
  
  const url = this.buildRecordsUrl('{{variantBaseName}}', pathComponents) + `?ids=${documentId}&fields=${fieldNames.join(',')}`

  const result = await nodeFetch(url, {
    method: 'get',
    headers: {
      'content-type': 'application/json',
      'x-api-key': this.apiKey,
      'x-user': JSON.stringify(user)
    }
  })

  if (result.status !== 200) {
    const err = await this.generateError(url, result)
    throw err
  }

  const json = await result.json()

  return json.docs.length === 1
    ? json.docs[0] as Types.{{identToPascalCase system}}{{identToPascalCase name}}
    : null
}
